//////////////
/// Modified by T. Mayer 5/19/25 NASA EarthHub NPS HaleakalƒÅ National Park Project
/// https://github.com/MayerT1/Haleakal_NPS/blob/main/README.md
// Author/prepared by: Kabir Uddin, Biplov Bhandari, and T. Mayer
// Email: kabir.uddin.bd@gmail.com, Kabir.Uddin@icimod.org, Bbb0134@uah.edu , tjm0042@uah.edu
// Article in Draft: Scaling Soil Erosion Dynamics for Hindu Kush Himalaya using Google Earth Engine 
///Kabir Uddin1, 2, Biplov Bhandari 3,4, Timothy Mayer4,5, Birendra Bajracharya1,
/////////////







// Purpose of the code: estimate annual average soil loss in the HKH region  

// Main reference paper: https://journals.plos.org/plosone/article/file?id=10.1371/journal.pone.0150494&type=printable
// RUSLE is expressed as follows:  
// A = R * K * L*S * C * P 

// Define the year 
var year = 2015; 

// Define the time period
var startDate = ee.Date(year + '-01-01'); // mapping year 
var endDate = ee.Date(year + '-12-31'); // mapping year

// Check if the start and end dates are within the same year
if (startDate.get('year').format().getInfo() != endDate.get('year').format().getInfo()) {
  throw new Error('Start and end dates must be within the same year.');
}

// Extract the year from the startDate
var extractedYear = startDate.get('year').format().getInfo();
print('Year:', extractedYear); // Output: year



// Study area boundary for HKH
var bnd = geometry//ee.FeatureCollection('projects/servir-hkh/RLCMS/HKH/bnd/hkh_admin').geometry();

// Calculating R Factor using WorldClim data 

// Load the WorldClim V1 dataset
// Import the WorldClim V1 Monthly Precipitation dataset
var worldclim = ee.ImageCollection('WORLDCLIM/V1/MONTHLY').select('prec');

// Function to square each monthly precipitation image
function squarePrecip(img) {
  return img.pow(2);
}

// Calculate sum of squares of monthly precipitation
var monthlySquares = worldclim.map(squarePrecip);
var annualSquareSum = monthlySquares.reduce(ee.Reducer.sum());

// Calculate the total annual precipitation
var annualPrecip = worldclim.reduce(ee.Reducer.sum());

// Calculate the Modified Fournier Index (MFI)
var mfi = annualSquareSum.divide(annualPrecip);

// Assuming an empirical conversion factor to get R Factor (this is a placeholder, adjust based on local calibration)
var rFactor = mfi.multiply(1.4).clip(bnd);
var R_Factor = rFactor.rename('R_Factor').clip(bnd);

// Define visualization parameters for the R Factor
var visParamsRFactor = {   
  min: 300,   
  max: 600,   
  palette: ['blue', 'green', 'yellow', 'orange', 'red']
};

// Optionally, add the R Factor layer to the map for visualization
 Map.addLayer(R_Factor, visParamsRFactor, 'R Factor', false);


//........................................................................................

// Calculate K Factor

// Load the Harmonized World Soil Database (HWSD) and select the FAO90 band
var soilRepository = ee.Image("projects/sat-io/open-datasets/FAO/HWSD_V2_SMU")
  .select('FAO90') // Ensure that 'FAO90' is the correct band name
  .clip(bnd); // Clip to the specified boundary

// Define the mapping from FAO90 class codes to K-factor values
var fromList = [3, 4, 5, 6, 8, 9, 13, 16, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 107, 109, 111, 112, 116, 118, 119, 120, 121, 124, 125, 126, 127, 128, 131, 132, 137, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 175];
var toList = [0.20, 0.15, 0.20, 0.02, 0.25, 0.05, 0.15, 0.30, 0.24, 0.01, 0.20, 0.10, 0.15, 0.20, 0.20, 0.02, 0.22, 0.10, 0.25, 0.20, 0.15, 0.20, 0.25, 0.20, 0.40, 0.35, 0.20, 0.20, 0.20, 0.30, 0.28, 0.17, 0.24, 0.22, 0.20, 0.30, 0.15, 0.32, 0.35, 0.12, 0.20, 0.18, 0.20, 0.16, 0.20, 0.15, 0.24, 0.22, 0.20, 0.10, 0.20, 0.30, 0.20, 0.25, 0.15, 0.20, 0.25, 0.30, 0.28, 0.22, 0.15, 0.20, 0.24, 0.30, 0.22, 0.20, 0.15, 0.10, 0.20, 0.30, 0.15, 0.20, 0.25, 0.20, 0.15, 0.20, 0.20, 0.10, 0.20, 0.24, 0.20, 0.22, 0.30, 0.24, 0.15, 0.20, 0.25, 0.20, 0.10, 0.20, 0.30, 0.24, 0.15, 0.20, 0.25, 0.20, 0.24, 0.22, 0.30, 0.20, 0.25, 0.30, 0.28, 0.15, 0.20, 0.24, 0.22, 0.15, 0.20, 0.25, 0.20, 0.15, 0.30, 0.20, 0.25, 0.24, 0.22, 0.20, 0.25, 0.30, 0.20, 0.15, 0.10, 0.20, 0.24, 0.30, 0.28, 0.22];

// Truncate toList to match the length of fromList
toList = toList.slice(0, fromList.length);

// Ensure both lists have the same length
if (fromList.length !== toList.length) {
  throw new Error('fromList and toList must be the same length.');
}

// Remap soil class codes to K-factor values
var kFactor = soilRepository.remap(fromList, toList, 0, 'FAO90');

// Rename the resulting layer for better clarity and manageability
var K_Factor = kFactor.rename('K_Factor').clip(bnd);

// Display the K-factor layer on the map, using a color gradient for visualization
Map.addLayer(K_Factor, {min: 0.0, max: 0.40, palette: ['green', 'yellow', 'red']}, 'K Factor', false);

//........................................................................................



// Load the SRTM DEM data with a resolution of 30 meters
var srtm = ee.Image("CGIAR/SRTM90_V4").clip(bnd);

// Fill sinks in the DEM
var filledDem = srtm.focal_max(3).focal_min(5).focal_max(3);

//
filledDem = filledDem.clip(bnd);


// Compute the slope in degrees
var slope = ee.Terrain.slope(filledDem);

// Define a function to calculate the slope length factor (L)
function calcLFactor(slope) {
  var slopeLength = 30; // Assuming the slope length is equal to the grid size of SRTM
  var referenceSlopeLength = 22.13; // Reference slope length commonly used in soil erosion studies
  var m = slope.expression(
    "b('slope') < 1 ? 0.2 :" +
    "b('slope') < 3 ? 0.3 :" +
    "b('slope') < 4.5 ? 0.4 : 0.5",
    { 'slope': slope }
  );

  // Calculate the L factor using the formula L = (slopeLength / referenceSlopeLength)^m
  var L = ee.Image.constant(slopeLength).divide(referenceSlopeLength).pow(m);
  return L;
}

// Calculate and display the L factor
var lFactor = calcLFactor(slope);
var L_Factor = lFactor.rename('L_Factor').clip(bnd);
Map.addLayer(L_Factor, {min: 1.0, max: 1.5, palette: ['blue', 'green', 'yellow', 'red']}, 'L Factor', false);



//.........................................................................


// Compute slope in radians and then calculate the percentage slope
// Compute the slope in degrees
var slopeDegrees = ee.Terrain.slope(srtm);

// Function to calculate the S Factor based on slope in degrees
function calcSFactor(slopeDegrees) {
  var slopeRadians = slopeDegrees.multiply(Math.PI / 180);
  var sinTheta = slopeRadians.sin();
  
  // Empirical formula to calculate S factor
  var sFactor = sinTheta.expression(
    "10.8 * sin + 0.03", // Adjusted empirical formula
    { 'sin': sinTheta }
  );
  return sFactor;
}

// Calculate and display the S factor
var sFactor = calcSFactor(slopeDegrees);

// Calculate, rename, and display the S factor
var S_Factor = sFactor.rename('S_Factor').clip(bnd);
Map.addLayer(S_Factor, {min: 0, max: 2.5, palette: ['green', 'yellow', 'red']}, 'S Factor', false);


//..........................................................................


// Function to robust cloud masking adapted for Landsat 5 TM and Landsat 7 ETM+
function maskL5L7(image) {
  var qa = image.select('QA_PIXEL');
  // Masks out cloud and shadow pixels.
  var mask = qa.bitwiseAnd(1 << 3).eq(0) // Cloud shadow
             .and(qa.bitwiseAnd(1 << 5).eq(0)); // Cloud
  return image.updateMask(mask);
}

// Function to calculate NDVI for Landsat 5 TM
function addNDVI_L5(image) {
  var ndvi = image.normalizedDifference(['SR_B4', 'SR_B3']).rename('NDVI');
  // Normalize and clip NDVI values
  ndvi = ndvi.where(ndvi.lt(0), 0).where(ndvi.gt(1), 1);
  return image.addBands(ndvi);
}

// Load and process Landsat 5 TM ImageCollection
var landsat5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
  .filterBounds(bnd)
  .filterDate(startDate, endDate)
  .map(maskL5L7) // Apply the cloud mask
  .map(addNDVI_L5);

var meanNDVI_L5 = landsat5.select('NDVI').mean().clip(bnd);

// Function to calculate NDVI for Landsat 7 ETM+
function addNDVI_L7(image) {
  var ndvi = image.normalizedDifference(['SR_B4', 'SR_B3']).rename('NDVI');
  ndvi = ndvi.where(ndvi.lt(0), 0).where(ndvi.gt(1), 1);
  return image.addBands(ndvi);
}

// Load and process Landsat 7 ETM+ ImageCollection
var landsat7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
  .filterBounds(bnd)
  .filterDate(startDate, endDate)
  .map(maskL5L7) // Apply similar cloud mask
  .map(addNDVI_L7);

var meanNDVI_L7 = landsat7.select('NDVI').mean().clip(bnd);

// Combine NDVI from all processed Landsat collections
var meanNDVIs = ee.ImageCollection.fromImages([meanNDVI_L5, meanNDVI_L7]);
var validNDVIs = meanNDVIs.filter(ee.Filter.listContains('system:band_names', 'NDVI'));
var combinedNDVI = validNDVIs.mean();

// C-factor calculation
var alpha = 2.8;
var beta = 1.2;
var cFactor = combinedNDVI.expression(
  'exp(-alpha * (ndvi / (beta - ndvi)))', {
    'ndvi': combinedNDVI,
    'alpha': alpha,
    'beta': beta
  })
  
  var C_Factor = cFactor.rename('cFactor');

Map.addLayer(C_Factor, {min: 0.1, max: 1, palette: ['green', 'yellow', 'red']}, 'C Factor', false);




//............................................................................

//https://developers.google.com/earth-engine/datasets/catalog/USGS_GAP_HI_2001#description
// The GAP/LANDFIRE National Terrestrial Ecosystems data represents a detailed vegetation and land cover classification for the Conterminous U.S., Alaska, Hawaii, and Puerto Rico.GAP/LF 2011 Ecosystems for the Conterminous U.S. is an update of the National Gap Analysis Program Land Cover Data - Version 2.2. Alaska ecosystems have been updated by LANDFIRE to 2012 conditions (LANDFIRE 2012). Hawaii and Puerto Rico data represent the 2001 time-frame (Gon et al. 2006, Gould et al. 2008). The classification scheme used for the Alaska and the lower 48 states is based on NatureServe's Ecological System Classification (Comer et al. 2003), while Puerto Rico and Hawaii's map legend are based on island specific classification systems (Gon et al. 2006, Gould et al. 2008).


//https://docs.google.com/drawings/d/1JY2tSr7L8nIfuQzRdXwMxzvuLeYoV3zdWdAsXBNX2-U/edit?usp=sharing
var landcover = ee.Image('USGS/GAP/HI/2001');

// // A land cover image.
// var img = ee.Image('ESA/WorldCover/v100/2020');

// A list of pixel values to replace.
var fromList = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37];
// A corresponding list of replacement values (10 becomes 1, 20 becomes 2, etc).
var toList =  [1,2,7,7,7,7,7,7,7,7,7,1,1,1,1,1,1,7,7,1,1,1,1,1,3,7,4,5,5,2,7,1,7,1,6,6,6]

// [1,2,2,2,2,2,2,2,2,2 ,2, 1 ,1 ,1 ,1 ,1 ,1 ,2 ,2 ,1 ,1 ,1 ,1 ,1 ,3 ,2 ,4 ,5 ,5 ,2 ,2 ,1 ,2 ,1 ,2 ,2 ,6 ];

// Replace pixel values in the image. If the image is multi-band, only the
// remapped band will be returned. The returned band name is "remapped".
// Input image properties are retained in the output image.
var imgRemap = landcover.remap({
  from: fromList,
  to: toList,
  defaultValue: 0,
  bandName: 'landcover'
});

// Display the original and remapped images. Note that similar land cover
// classes in the original image are grouped into aggregate classes by
// from ‚Üí to value mapping.
Map.addLayer(landcover, null, 'Original image');
Map.addLayer(imgRemap, {
    min: 1, max: 6,
    palette:'darkgreen, lightgreen, red, white, blue, lightblue'
  }, 'Remapped image');



// 1	#7c009c	Mixed Native-Alien Forest                     
// 2	#c14f00	Mixed Native-Alien Shrubs and Grasses
// 3	#c1e09e	Native Coastal Vegetation
// 4	#ef0047	Deschampsia Grassland
// 5	#d67900	Aalii Shrubland
// 6	#00e3eb	Bog Vegetation
// 7	#ccbf70	Native Dry Cliff Vegetation
// 8	#7c7047	Native Shrubland / Sparse Ohia (native shrubs)
// 9	#617000	Native Wet Cliff Vegetation
// 10	#66e805	Open Mao Shrubland
// 11	#bf6b00	Uluhe Shrubland
// 12	#9bcc9b	Closed Hala Forest
// 13	#008f99	Closed Koa-Ohia Forest
// 14	#009c61	Closed Ohia Forest
// 15	#2bcf56	Closed Pouteria Forest (native trees)
// 16	#3ff2bf	Koa Forest
// 17	#9b9b4c	Mamane / Naio / Native Trees
// 18	#8ebc00	Native Mesic to Dry Forest and Shrubland
// 19	#33c7a6	Native Wet Forest and Shrubland
// 20	#7fbf00	Ohia Forest
// 21	#007f7f	Olopua-Lama Forest
// 22	#b3ed7f	Open Koa-Mamane Forest
// 23	#21ab33	Open Koa-Ohia Forest
// 24	#000000	Open Ohia Forest
// 25	#002dc2	Open Water
// 26	#afe200	Wetland Vegetation
// 27	#fefec1	Agriculture
// 28	#eb3642	High Intensity Developed
// 29	#c94d42	Low Intensity Developed
// 30	#ccb8bf	Alien Grassland
// 31	#9f298c	Alien Shrubland
// 32	#75009c	Alien Forest
// 33	#460075	Kiawe Forest and Shrubland
// 34	#001493	Uncharacterized Forest
// 35	#ededed	Uncharacterized Open-Sparse Vegetation
// 36	#d99485	Uncharacterized Shrubland
// 37	#6b6b6b	Very Sparse Vegetation to Unvegetated



// // Define land cover layer
// var layerLC = "hkh_landcover-" + year;
// var repository = 'projects/servir-hkh/RLCMS/HKH/landcover';
// var landcover = ee.Image(repository + '/' + layerLC);


// Use the correct band name for remapping
var bandName = 'landcover'; 

////old HKH 
// 1	Waterbodies 
// 2	Glacier
// 3	Snow
// 4	Forest
// 5	River bed
// 6	Built-up
// 7	Crop land
// 8	Bare soil
// 9	Bare rock
// 10	Grass land
// 11	Other wooded land (OWL)



// // Define support practice factor (P) mapping
// var fromListP = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
// var toListP = [0.28, 0.0, 0.00, 0.0012, 0.214, 0.014, 0.155, 0.0145, 0.00, 0.1282, 0.0017];


// Define support practice factor (P) mapping
var fromListP = [3, 1, 4, 5, 6, 2, 7];
var toListP = [0.28, 0.0012, 0.014, 0.155, 0.0145, 0.1282, 0.0017];


// Ensure both lists have the same length
if (fromListP.length !== toListP.length) {
  throw new Error('fromList and toList must be the same length.');
}

// Remap land cover to P factor
var lcRemap = landcover.remap(fromListP, toListP, 0, bandName);
var P_Factor = lcRemap.rename('P_Factor');

// Define the palette for visualization
var palette_pFactor = ['fa460d', '3fbe00', '77b200', '1c9507', 'ff3714', 'ffda4b', 'CCCC00', 'f9f900', 'e3d61c', '9ecc34', '40cc15'];
Map.addLayer(P_Factor.clip(bnd), {min: 0, max: 0.5, palette: palette_pFactor}, 'P Factor', false);



//.................................................................................................................

// Compute and display the Annual Soil Loss using the Revised Universal Soil Loss Equation (RUSLE) model, integrating all factors
// Check if all factors are available
if (typeof R_Factor === 'undefined' || typeof K_Factor === 'undefined' || typeof L_Factor === 'undefined' ||
    typeof S_Factor === 'undefined' || typeof C_Factor === 'undefined' || typeof P_Factor === 'undefined') {
  throw new Error('One or more RUSLE factors are missing. Please ensure all factors are computed.');
}

// Compute Annual Soil Loss using RUSLE factors
var ASoilLoss = R_Factor.multiply(K_Factor)
                             .multiply(L_Factor)
                             .multiply(S_Factor)
                             .multiply(C_Factor)
                             .multiply(P_Factor)
                             .rename('Soil_Loss');  // Renaming the computed layer to 'Soil_Loss'

// Replace null values with 0 for initial calculation
ASoilLoss = ASoilLoss.unmask(0);

// Cap Annual Soil Loss values to a maximum of 60
var maxSoilLoss = 64;
var CappedSoilLoss = ASoilLoss.where(
  ASoilLoss.gt(maxSoilLoss),
  maxSoilLoss
);

// Replace 0 values with 0.01
var AnnualSoilLoss = CappedSoilLoss.where(
  CappedSoilLoss.eq(0),
  0.01
);



// Define visualization parameters for Annual Soil Loss
var visParams = {
  min: 0,
  max: 54,  // Updated max value to reflect the cap
  palette: ['green', 'yellow', 'red']
};

// Add the Capped Annual Soil Loss layer to the map
Map.addLayer(AnnualSoilLoss.clip(bnd), visParams, 'Annual Soil Loss', false);

//////////////////////////
// Define visualization parameters for Annual Soil Loss
var visParams2 = {
  min: 0.02,
  max: 3.5,  // Updated max value to reflect the cap
  palette: ['green', 'yellow', 'red']
};


var img = AnnualSoilLoss.clip(bnd)

var img_gte = img.gte(0.02);
var img_gte_only = img.updateMask(img_gte);
Map.addLayer(img_gte_only,visParams2, 'Annual Soil Loss No Background')




// Export the resulting image to Google Earth Engine Assets
Export.image.toAsset({
  image: ASoilLoss,
  scale: 100,
  region: bnd,
  maxPixels: 3e10,
  assetId: 'projects/servir-hkh/Erosion/Soil_Loss/' + year,
  description: 'Soil_Loss_' + year
});

// // Export the resulting image to Google Drive
// Export.image.toDrive({
//   image: AnnualSoilLoss,
//   scale: 100,  // Adjust the scale to reduce memory usage
//   region: bnd,
//   maxPixels: 3e10,
//   folder: "a",
//   description: 'Soil_Loss_' + year
// });





// // Function to calculate zonal statistics at 100 meter pixel size
// function zonalStats(image, zoneCollection, zoneId) {
//   return image.reduceRegions({
//     collection: zoneCollection,
//     reducer: ee.Reducer.sum(),
//     scale: 100,
//     crs: 'EPSG:4326'
//   }).map(function(feature) {
//     return feature.set('zone_id', feature.get(zoneId));
//   });
// }

// // Calculate zonal statistics for each year
// var stats2000 = zonalStats(AnnualSoilLoss, bnd, 'id');
// //var stats2010 = zonalStats(soilLoss2010, bnd, 'id');
// //var stats2020 = zonalStats(soilLoss2020, bnd, 'id');

// // Extract and print the sum values and sum values in millions
// function printSumValues(stats, year) {
//   stats.aggregate_array('sum').evaluate(function(sums) {
//     var sumsInMillions = sums.map(function(sum) {
//       return sum / 1e6;
//     });
//     print('Sum values for ' + year, sums);
//     print('Sum values in millions for ' + year, sumsInMillions);
//   });
// }

// printSumValues(stats2000, '2000');
// // printSumValues(stats2010, '2010');
// // printSumValues(stats2020, '2020');


 
